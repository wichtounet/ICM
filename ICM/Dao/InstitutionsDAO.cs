using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using ICM.Model;
using ICM.Utils;
using NLog;

namespace ICM.Dao
{
    ///<summary>
    /// This class enables the user to make operations on the "Institution" table. With this DAO, you can create, update, delete and search for institutions. 
    ///</summary>
    /// <remarks>
    /// Kean Mariotti
    /// </remarks>
    public class InstitutionsDAO
    {
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger();

        /// <summary>
        /// Locks the institution table in database performing a dummy update.
        /// </summary>
        /// <param name="id">Valid id of an institution.</param>
        /// <param name="transaction">Transaction to be used.</param>
        public void LockInstitution(int id, SqlTransaction transaction)
        {
            Logger.Debug("Locking institution with ID ({0})", id);

            var parameters = new NameValueCollection
            {
                {"@id", id.ToString()},
            };

            var command = new SqlCommand("UPDATE [Institution] set name = name WHERE id = @id", transaction.Connection, transaction) { CommandTimeout = 3 };

            foreach (var key in parameters.AllKeys)
            {
                command.Parameters.AddWithValue(key, parameters.Get(key));
            }

            command.ExecuteNonQuery();

            Logger.Debug("Locked institution with ID ({0})", id);
        }

        /// <summary>
        /// Adds an insitution to the database.
        /// </summary>
        /// <param name="institution">Institution to be added.</param>
        /// <returns>The institutin's ID automatically generated by the database.</returns>
        public int AddInstitution(Institution institution)
        {
            Logger.Debug("Creating institution in database");

            var parametersInstitution = new NameValueCollection
            {
                {"@name", institution.Name},
                {"@description", institution.Description},
                {"@city", institution.City},
                {"@interest", institution.Interest},
                {"@languageName", institution.Language.Name},
                {"@countryName", institution.Country.Name},
                {"@archived", "0"}
            };

            using(var connection = DBManager.GetInstance().GetNewConnection())
            {
                var transaction = connection.BeginTransaction(IsolationLevel.ReadCommitted);

                //Insert institution
                var institutionId = DBUtils.ExecuteInsert(
                    "INSERT INTO [Institution] (name,description,city,interest,languageName,countryName,archived) VALUES (@name,@description,@city,@interest,@languageName,@countryName,@archived)",
                    parametersInstitution, "Institution", transaction);

                //Insert departments
                foreach (var department in institution.Departments)
                {
                    var parametersDepartment = new NameValueCollection
                    {
                        {"@name", department.Name},
                        {"@institutionId", institutionId.ToString()},
                        {"@archived", "0"}
                    };

                    DBUtils.ExecuteInsert(
                        "INSERT INTO [Department] (name,institutionId,archived) VALUES (@name,@institutionId,@archived)",
                        parametersDepartment, "Department", transaction);
                }

                transaction.Commit();

                Logger.Debug("Created institution with id {0} in database", institutionId);

                return institutionId;
            }
        }

        /// <summary>
        /// Creates an institution's instance representing the institution stored in the database with the specified ID.
        /// </summary>
        /// <param name="id">ID of the institution stored in the database.</param>
        /// <param name="transaction">Transaction to be used.</param>
        /// <returns>Institution's instance.</returns>
        public Institution GetInstitution(int id, SqlTransaction transaction)
        {
            Institution institution = null;

            Logger.Debug("Retrieving institution with id {0} from database", id);

            var parameters = new NameValueCollection
            {
                {"@id", id.ToString()},
            };

            using (var institutionReader = DBUtils.ExecuteTransactionQuery("SELECT id, name, description, city, interest, languageName, countryName, archived FROM [Institution] WHERE id = @id", transaction, parameters))
            {
                if (institutionReader.Read())
                {
                    institution = GetInstitutionWithoutDepartmentsAndContinent(institutionReader);
                }
            }

            if (institution != null)
            {
                institution.Departments = GetDepartments(institution.Id, transaction);
                institution.Country.Continent = GetContinent(institution.Country.Name, transaction);
            }

            Logger.Debug("Retrieved institution with id {0} from database", id);

            return institution;
        }

        ///<summary>
        /// Return the institution with the given id. This method opens a connection and close it. 
        ///</summary>
        ///<param name="id">The id of the institution to search. </param>
        ///<returns>The institution with the given id. </returns>
        public Institution GetInstitution(int id)
        {
            Logger.Debug("Retrieving institution with id {0} from database", id);

            using(var connection = DBManager.GetInstance().GetNewConnection())
            {
                return GetInstitution(id, connection);
            }
        }

        /// <summary>
        /// Return the institution with the given id.
        /// </summary>
        /// <param name="id">Institution's id.</param>
        /// <param name="connection">Connection to be used.</param>
        /// <returns>An instance of the institution.</returns>
        public Institution GetInstitution(int id, SqlConnection connection)
        {
            Institution institution = null;

            var parameters = new NameValueCollection
            {
                {"@id", id.ToString()},
            };

            var transaction = connection.BeginTransaction(IsolationLevel.ReadCommitted);

            using (var institutionReader = DBUtils.ExecuteTransactionQuery("SELECT id, name, description, city, interest, languageName, countryName, archived FROM [Institution] WHERE id = @id", transaction, parameters))
            {
                if (institutionReader.Read())
                {
                    institution = GetInstitutionWithoutDepartmentsAndContinent(institutionReader);
                }
            }

            if (institution != null)
            {
                institution.Departments = GetDepartments(institution.Id, transaction);
                institution.Country.Continent = GetContinent(institution.Country.Name, transaction);
            }

            transaction.Commit();

            Logger.Debug("Retrieved institution with id {0} from database", id);

            return institution;
        }

        /// <summary>
        /// Updates information about an institution (in database).
        /// </summary>
        /// <param name="institution">Represents the institution to be updated.</param>
        /// <param name="transaction">Transactin to be used.</param>
        public void UpdateInstitution(Institution institution, SqlTransaction transaction)
        {
            NameValueCollection parameters;

            var oldDepartments = GetDepartments(institution.Id, transaction);  //Department already present in DB

            Logger.Debug("Archiving old departments of institution with id {0} in database", institution.Id);

            //Delete all the old departments
            foreach(var oldDepartment in oldDepartments)
            {
                if (!institution.Departments.ContainsDepartmentWithName(oldDepartment.Name))
                {
                    ArchiveDepartment(oldDepartment.Id, transaction);
                }
            }

            Logger.Debug("Archived old departments of institution with id {0} in database", institution.Id);

            Logger.Debug("Adding new departments of institution with id {0} into database", institution.Id);

            //Add all the new departments
            foreach(var department in institution.Departments)
            {
                if (!oldDepartments.ContainsDepartmentWithName(department.Name))
                {
                    parameters = new NameValueCollection
                    {
                        {"@name", department.Name},
                        {"@institutionId", institution.Id.ToString()},
                        {"@archived", "0"}
                    };

                    DBUtils.ExecuteNonQuery(
                        "INSERT INTO [Department] (name,institutionId,archived) VALUES (@name,@institutionId,@archived)",
                        transaction,
                        parameters);
                }
            }

            Logger.Debug("Added new departments of institution with id {0} into database", institution.Id);

            //Update institution data
            parameters = new NameValueCollection
            {
                {"@institutionId", institution.Id.ToString()},
                {"@name", institution.Name},
                {"@description", institution.Description},
                {"@city", institution.City},
                {"@interest", institution.Interest},
                {"@languageName", institution.Language.Name},
                {"@countryName", institution.Country.Name},
                {"@archived", "0"}
            };

            Logger.Debug("Updating information of institution with id {0} in database", institution.Id);

            DBUtils.ExecuteNonQuery(
                "UPDATE [Institution] SET name = @name, description = @description, city = @city, interest = @interest, languageName = @languageName, countryName = @countryName WHERE id = @institutionId",
                transaction,
                parameters);

            Logger.Debug("Updated information of institution with id {0} in database", institution.Id);
        }

        ///<summary>
        /// Returns all the institutions. This method opens a new connection and close it. 
        ///</summary>
        ///<returns>All the institutions of the database. </returns>
        public List<Institution> GetInstitutionsClean()
        {
            using (var connection = DBManager.GetInstance().GetNewConnection())
            {
                return GetInstitutions(connection);
            }
        }
        
        /// <summary>
        /// Creates and fills a list with all the institutions stored in the database.
        /// </summary>
        /// <param name="connection">Connection to be used.</param>
        /// <returns>The list of institutions.</returns>
        public List<Institution> GetInstitutions(SqlConnection connection)
        {
            var institutions = new List<Institution>();

            var transaction = connection.BeginTransaction(IsolationLevel.ReadCommitted);

            Logger.Debug("Retrieving all the institutions from database");

            //Instantiate institutions without department list
            using (var institutionReader = DBUtils.ExecuteTransactionQuery("SELECT id, name, description, city, interest, languageName, countryName, archived FROM [Institution]", transaction))
            {
                while (institutionReader.Read())
                {
                    institutions.Add(GetInstitutionWithoutDepartmentsAndContinent(institutionReader));
                }
            }

            Logger.Debug("Retrieved all the institutions from database");

            Logger.Debug("Retrieving all the departments from database");

            //Add department list to the institutions
            foreach (var institution in institutions)
            {
                institution.Departments = GetDepartments(institution.Id, transaction);
                institution.Country.Continent = GetContinent(institution.Country.Name, transaction);
            }

            transaction.Commit();

            Logger.Debug("Retrieved all the departments from database");
            
            return institutions;
        }

        /// <summary>
        /// Sets to 1 the archived field of an insitution (in database).
        /// </summary>
        /// <param name="id">The institution's id.</param>
        public void ArchiveInstitution(int id)
        {
            var parameters = new NameValueCollection
            {
                {"@id", id.ToString()}
            };

            Logger.Debug("Archiving the institution with id {0} in database", id);

            DBUtils.ExecuteUpdate(
                "UPDATE [Institution] SET archived = 1 WHERE id = @id",
                IsolationLevel.ReadUncommitted, parameters);

            Logger.Debug("Archived the institution with id {0} in database", id);
        }

        /// <summary>
        /// Sets to 1 the archived field of a department (in database).
        /// </summary>
        /// <param name="id">The department's id.</param>
        /// <param name="transaction">The transaction to be used^.</param>
        public void ArchiveDepartment(int id, SqlTransaction transaction)
        {
            var parameters = new NameValueCollection
            {
                {"@id", id.ToString()}
            };

            Logger.Debug("Archiving the department with id {0} in database", id);

            DBUtils.ExecuteNonQuery(
                    "UPDATE [Department] SET archived = 1 WHERE id = @id",
                    transaction,
                    parameters);

            Logger.Debug("Archived the department with id {0} in database", id);
        }

        /// <summary>
        /// Creates an institution having the departments list and the continent attributes not instanciated yet.
        /// </summary>
        /// <param name="institutionReader">An SqlResult instance used by the function to query the database.</param>
        /// <returns>The institution</returns>
        private static Institution GetInstitutionWithoutDepartmentsAndContinent(SqlResult institutionReader)
        {
            //Instantiate institution
            return new Institution( (int) institutionReader["id"],
                                    (string) institutionReader["name"],
                                    (string) institutionReader["description"],
                                    (string) institutionReader["city"],
                                    (string) institutionReader["Interest"],
                                    new Language { Name = (string) institutionReader["languageName"] },
                                    new Country { Name = (string)institutionReader["countryName"] }, 
                                    null,
                                    (bool) institutionReader["archived"]);
        }

        /// <summary>
        /// Creates and fill a list of departments belonging to the institution identified by insitutionId.
        /// </summary>
        /// <param name="institutionId">The institution's identifier.</param>
        /// <param name="transaction">The transaction to be used to query the database.</param>
        /// <returns>The department's list.</returns>
        private static List<Department> GetDepartments(int institutionId, SqlTransaction transaction)
        {
            var departments = new List<Department>();

            var parameters = new NameValueCollection
            {
                {"@institutionId", institutionId.ToString()}
            };

            using (var departmentReader = DBUtils.ExecuteTransactionQuery("SELECT id, name FROM [Department] WHERE institutionId = @institutionId and archived=0", transaction, parameters))
            {
                //Fill departments list
                while (departmentReader.Read())
                {
                    var department = new Department
                    {
                        Id = (int) departmentReader["id"],
                        Name = (string) departmentReader["name"]
                    };

                    departments.Add(department);
                }
            }

            Logger.Debug("Retrived department of the institution with id {0} in database", institutionId);

            return departments;
        }

        /// <summary>
        /// Creates continent to which the country identified by countryName belongs.
        /// </summary>
        /// <param name="countryName">The country's identifier.</param>
        /// <param name="transaction">The transaction to be used to query the database.</param>
        /// <returns>The continent instance.</returns>
        private static Continent GetContinent(string countryName, SqlTransaction transaction)
        {
            //Get continent name
            string continentName;
            var parameters = new NameValueCollection
            {
                {"@countryName", countryName}
            };

            using (var countryReader = DBUtils.ExecuteTransactionQuery("SELECT continentName FROM [Country] WHERE name = @countryName", transaction, parameters))
            {
                countryReader.Read();
                continentName = (string)countryReader["continentName"];
            }

            Logger.Debug("Retrieved continent of the country named {0} from database", countryName);

            //Instantiate continent
            return new Continent { Name = continentName };
        }

        /// <summary>
        /// Search for institutions in the database using the given arguments as criteria
        /// </summary>
        /// <param name="name">Instution name</param>
        /// <param name="language">Institution language</param>
        /// <param name="continent">Institution country</param>
        /// <param name="country">Institution country</param>
        /// <param name="archived">Institution state (archived or not)</param>
        /// <returns>All the institutions matching the search criteria</returns>
        public List<Institution> SearchInstitutions(string name, string language, string continent, string country, bool archived)
        {
            var institutions = new List<Institution>();
            var parameters = new NameValueCollection
            {
                {"@name", "%" + name + "%"},
                {"@languageName", "%" + language + "%"},
                {"@countryName", "%" + country + "%"},
                {"@continentName", continent}
            };

            // Create query string
            var query = "SELECT id, name, description, city, interest, languageName, countryName, archived FROM [Institution] WHERE name LIKE(@name) AND languageName LIKE(@languageName)";
            
            if (!archived)
            {
                query += " AND archived = 0";
            }

            if (country != "")
            {
                query += " AND countryName LIKE(@countryName)";
            }
            else if (continent != "")
            {
                query += " AND countryName IN (SELECT name FROM country WHERE continentName = @continentName)";
            }

            Logger.Debug("Retrieving institutions with name like {0}, language={1}, continent={2}, country={3}, archived={4} from database",
                            name,
                            language,
                            continent,
                            country,
                            archived);

            using (var connection = DBManager.GetInstance().GetNewConnection())
            {
                var transaction = connection.BeginTransaction(IsolationLevel.ReadCommitted);

                //Instantiate institutions without department list
                using (var institutionReader = DBUtils.ExecuteTransactionQuery(query, transaction, parameters))
                {
                    while (institutionReader.Read())
                    {
                        institutions.Add(GetInstitutionWithoutDepartmentsAndContinent(institutionReader));
                    }
                }

                //Add department list to the institutions
                foreach (var institution in institutions)
                {
                    institution.Departments = GetDepartments(institution.Id, transaction);
                    institution.Country.Continent = GetContinent(institution.Country.Name, transaction);
                }

                transaction.Commit();

                Logger.Debug("Retrieved institutions with name like {0}, language={1}, continent={2}, country={3}, archived={4} from database",
                                name,
                                language,
                                continent,
                                country,
                                archived);

                return institutions;
            }
        }

        /// <summary>
        /// Creates an instance of the department identified by id, which is stored in the database.
        /// </summary>
        /// <param name="id">The department's identifier.</param>
        /// <param name="connection">The connection to use</param>
        /// <returns>The department's instance.</returns>
        public Department GetDepartmentById(int id, SqlConnection connection)
        {
            var departments = new List<Department>();

            var transaction = connection.BeginTransaction(IsolationLevel.ReadCommitted);

            var parameters = new NameValueCollection
            {
                {"@id", id.ToString()},
            };

            Logger.Debug("Retriving department with id {0} from database", id);

            using (var readerDestination = DBUtils.ExecuteTransactionQuery("SELECT D.id AS depId, d.name AS depName, I.id AS institutionId, I.name AS insName, I.city, I.languageName, I.countryName" +
                                                     " FROM [Department] D" +
                                                     " INNER JOIN [Institution] I" +
                                                     " ON D.institutionId = I.id" +
                                                     " WHERE D.id = @id"
                                                    , transaction, parameters))
            {
                while (readerDestination.Read())
                {
                    var d = new Department
                    {
                        Id = (int) readerDestination["depId"],
                        Name = (string) readerDestination["depName"],
                        InstitutionName = (string) readerDestination["insName"],
                        InstitutionId = (int) readerDestination["institutionId"],
                        InstitutionCity = (string) readerDestination["city"],
                        InstitutionCountry = (string) readerDestination["countryName"],
                        InstitutionLanguage = (string) readerDestination["languageName"]
                    };

                    departments.Add(d);
                }
            }

            transaction.Commit();

            Logger.Debug("Retrieved department with id {0} from database", id);

            return departments.First();
        }
    }
}